// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cartFieldNames          = builder.RawFieldNames(&Cart{})
	cartRows                = strings.Join(cartFieldNames, ",")
	cartRowsExpectAutoSet   = strings.Join(stringx.Remove(cartFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	cartRowsWithPlaceHolder = strings.Join(stringx.Remove(cartFieldNames, "`UserId`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	cartModel interface {
		Insert(ctx context.Context, data *Cart) (sql.Result, error)
		FindOne(ctx context.Context, userId int64) (*Cart, error)
		Update(ctx context.Context, data *Cart) error
		Delete(ctx context.Context, userId int64) error
	}

	defaultCartModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Cart struct {
		UserId    int64     `db:"UserId"`
		ProductId int64     `db:"ProductId"`
		Number    int64     `db:"Number"`
		Data      time.Time `db:"Data"`
	}
)

func newCartModel(conn sqlx.SqlConn) *defaultCartModel {
	return &defaultCartModel{
		conn:  conn,
		table: "`cart`",
	}
}

func (m *defaultCartModel) Delete(ctx context.Context, userId int64) error {
	query := fmt.Sprintf("delete from %s where `UserId` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, userId)
	return err
}

func (m *defaultCartModel) FindOne(ctx context.Context, userId int64) (*Cart, error) {
	query := fmt.Sprintf("select %s from %s where `UserId` = ? limit 1", cartRows, m.table)
	var resp Cart
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCartModel) Insert(ctx context.Context, data *Cart) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, cartRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.ProductId, data.Number, data.Data)
	return ret, err
}

func (m *defaultCartModel) Update(ctx context.Context, data *Cart) error {
	query := fmt.Sprintf("update %s set %s where `UserId` = ?", m.table, cartRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProductId, data.Number, data.Data, data.UserId)
	return err
}

func (m *defaultCartModel) tableName() string {
	return m.table
}
