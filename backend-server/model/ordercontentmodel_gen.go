// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderContentFieldNames          = builder.RawFieldNames(&OrderContent{})
	orderContentRows                = strings.Join(orderContentFieldNames, ",")
	orderContentRowsExpectAutoSet   = strings.Join(stringx.Remove(orderContentFieldNames, "`Id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orderContentRowsWithPlaceHolder = strings.Join(stringx.Remove(orderContentFieldNames, "`Id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	orderContentModel interface {
		Insert(ctx context.Context, data *OrderContent) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OrderContent, error)
		Update(ctx context.Context, data *OrderContent) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrderContentModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OrderContent struct {
		Id        int64          `db:"Id"`
		OrderId   int64          `db:"OrderId"`
		ProductId int64          `db:"ProductId"`
		Number    int64          `db:"Number"`
		Logistics sql.NullString `db:"Logistics"`
		State     int64          `db:"State"`
	}
)

func newOrderContentModel(conn sqlx.SqlConn) *defaultOrderContentModel {
	return &defaultOrderContentModel{
		conn:  conn,
		table: "`order_content`",
	}
}

func (m *defaultOrderContentModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `Id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOrderContentModel) FindOne(ctx context.Context, id int64) (*OrderContent, error) {
	query := fmt.Sprintf("select %s from %s where `Id` = ? limit 1", orderContentRows, m.table)
	var resp OrderContent
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderContentModel) Insert(ctx context.Context, data *OrderContent) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, orderContentRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrderId, data.ProductId, data.Number, data.Logistics, data.State)
	return ret, err
}

func (m *defaultOrderContentModel) Update(ctx context.Context, data *OrderContent) error {
	query := fmt.Sprintf("update %s set %s where `Id` = ?", m.table, orderContentRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.OrderId, data.ProductId, data.Number, data.Logistics, data.State, data.Id)
	return err
}

func (m *defaultOrderContentModel) tableName() string {
	return m.table
}
