// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	marchantFieldNames          = builder.RawFieldNames(&Marchant{})
	marchantRows                = strings.Join(marchantFieldNames, ",")
	marchantRowsExpectAutoSet   = strings.Join(stringx.Remove(marchantFieldNames, "`Id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	marchantRowsWithPlaceHolder = strings.Join(stringx.Remove(marchantFieldNames, "`Id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	marchantModel interface {
		Insert(ctx context.Context, data *Marchant) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Marchant, error)
		FindOneByName(ctx context.Context, name string) (*Marchant, error)
		Update(ctx context.Context, data *Marchant) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMarchantModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Marchant struct {
		Id            int64  `db:"Id"`
		Name          string `db:"Name"`
		Password      string `db:"Password"`
		AvatarLocator string `db:"AvatarLocator"`
		Licence       string `db:"Licence"`
		TelePhone     string `db:"TelePhone"`
		Intro         string `db:"Intro"`
		Date          time.Time  `db:"Date"`
		State         int64  `db:"State"`
	}
)

func newMarchantModel(conn sqlx.SqlConn) *defaultMarchantModel {
	return &defaultMarchantModel{
		conn:  conn,
		table: "`merchant`",
	}
}

func (m *defaultMarchantModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `Id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultMarchantModel) FindOne(ctx context.Context, id int64) (*Marchant, error) {
	query := fmt.Sprintf("select %s from %s where `Id` = ? limit 1", marchantRows, m.table)
	var resp Marchant
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMarchantModel) FindOneByName(ctx context.Context, name string) (*Marchant, error) {
	var resp Marchant
	query := fmt.Sprintf("select %s from %s where `Name` = ? limit 1", marchantRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMarchantModel) Insert(ctx context.Context, data *Marchant) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, marchantRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Password, data.AvatarLocator, data.Licence, data.TelePhone, data.Intro, data.Date, data.State)
	return ret, err
}

func (m *defaultMarchantModel) Update(ctx context.Context, newData *Marchant) error {
	query := fmt.Sprintf("update %s set %s where `Id` = ?", m.table, marchantRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Name, newData.Password, newData.AvatarLocator, newData.Licence, newData.TelePhone, newData.Intro, newData.Date, newData.State, newData.Id)
	return err
}

func (m *defaultMarchantModel) tableName() string {
	return m.table
}
