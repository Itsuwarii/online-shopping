// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actionFieldNames          = builder.RawFieldNames(&Action{})
	actionRows                = strings.Join(actionFieldNames, ",")
	actionRowsExpectAutoSet   = strings.Join(stringx.Remove(actionFieldNames, "`Id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	actionRowsWithPlaceHolder = strings.Join(stringx.Remove(actionFieldNames, "`Id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	actionModel interface {
		Insert(ctx context.Context, data *Action) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Action, error)
		Update(ctx context.Context, data *Action) error
		Delete(ctx context.Context, id int64) error
	}

	defaultActionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Action struct {
		Id         int64 `db:"Id"`
		UserId     int64 `db:"UserId"`
		MerchantId int64 `db:"MerchantId"`
		ContentId  int64 `db:"ContentId"`
	}
)

func newActionModel(conn sqlx.SqlConn) *defaultActionModel {
	return &defaultActionModel{
		conn:  conn,
		table: "`action`",
	}
}

func (m *defaultActionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `Id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultActionModel) FindOne(ctx context.Context, id int64) (*Action, error) {
	query := fmt.Sprintf("select %s from %s where `Id` = ? limit 1", actionRows, m.table)
	var resp Action
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActionModel) Insert(ctx context.Context, data *Action) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, actionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.MerchantId, data.ContentId)
	return ret, err
}

func (m *defaultActionModel) Update(ctx context.Context, data *Action) error {
	query := fmt.Sprintf("update %s set %s where `Id` = ?", m.table, actionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.MerchantId, data.ContentId, data.Id)
	return err
}

func (m *defaultActionModel) tableName() string {
	return m.table
}
