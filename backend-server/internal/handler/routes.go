// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	"ludwig.com/onlineshopping/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/register/checkname",
				Handler: RegisterNameAvailableHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/signin",
				Handler: LoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/token"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/refresh",
				Handler: RefreshHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/token"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/",
				Handler: UserInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/",
				Handler: UpdateUserInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/",
				Handler: DeleteUserHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/user"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: MerchantRegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/register/checkname",
				Handler: MerchantRegisterNameAvailableHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/signin",
				Handler: MerchantLoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/merchant/token"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/refresh",
				Handler: MerchantRefreshHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/token/merchant"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/",
				Handler: MerchantInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/get",
				Handler: MerchantInfoForUserHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/",
				Handler: MerchantUpdateInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/",
				Handler: MerchantDeleteHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/merchant"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/",
				Handler: CartHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/",
				Handler: CartUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/",
				Handler: CartClearHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/cart"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/get",
				Handler: ProductHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/search",
				Handler: ProductSearchHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/",
				Handler: ProductCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/",
				Handler: ProductUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/",
				Handler: ProductDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/random",
				Handler: ProductRandomIdListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/all",
				Handler: ProductForMerchantHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/product"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/",
				Handler: ActionHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/",
				Handler: ActionCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/",
				Handler: ActionDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/all",
				Handler: ActionListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/content",
				Handler: ActionContentHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/content",
				Handler: ActionUpdateHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/action"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/get",
				Handler: OrderGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant/get",
				Handler: OrderGetForMerchantHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/",
				Handler: OrderCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/delete",
				Handler: OrderDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/list",
				Handler: OrdersListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/order"),
	)
	
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http. MethodPost,
				Path:    "/get",
				Handler: ImageHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/",
				Handler: ImagePutHandler(serverCtx),
			},
		},
		rest.WithPrefix("/image"),
	)
}
